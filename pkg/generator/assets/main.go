package main

import (
	"fmt"
	"io/fs"
	"io/ioutil"
	"log"
	"path"
	"sort"
	"strings"

	"github.com/ec-systems/core.ledger.service/pkg/logger"
	"golang.org/x/exp/maps"
	"gopkg.in/yaml.v3"
)

var (
	filename  = "assets.go"
	doNotEdit = "//Code generated by assets generator. DO NOT EDIT.\n"
)

func main() {
	yamlFile, err := ioutil.ReadFile(path.Join("..", "..", "assets.yaml"))
	if err != nil {
		log.Printf("yamlFile.Get err   #%v ", err)
	}

	var assets map[string]string

	err = yaml.Unmarshal(yamlFile, &assets)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}

	var sb strings.Builder

	sb.WriteString(doNotEdit)
	sb.WriteString("package types\n\n")

	/*
		coins := map[string]types.Asset{}
		for k, v := range assets {
			_, ok := coins[v]
			if ok {
				v = fmt.Sprintf("%v_%v", v, k)
			}

			coins[v] = types.Asset(k)
		}

			symbols := []string{}
			reverse := map[types.Asset]string{}
			for k, v := range coins {
				reverse[v] = k
				symbols = append(symbols, v.String())
			}
	*/

	symbols := maps.Keys(assets)
	sort.Strings(symbols)

	sb.WriteString("var DefaultAssetNames = Assets{\n")

	for _, s := range symbols {
		//k := types.Asset(s)
		v := assets[s]
		//sb.WriteString(fmt.Sprintf("\t\"%v\": Asset(\"%v\"),\n", k, v))
		sb.WriteString(fmt.Sprintf("\tAsset(\"%v\"): \"%v\",\n", s, v))
	}

	sb.WriteString("}\n\n")

	logger.Infof("Write assets file: %v", filename)
	err = ioutil.WriteFile(filename, []byte(sb.String()), fs.ModePerm)
	if err != nil {
		logger.Fatalf("Error write %v: %v", filename, err)
	}

}
