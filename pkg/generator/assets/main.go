package main

import (
	"fmt"
	"io/fs"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/ec-systems/core.ledger.server/pkg/logger"
	"golang.org/x/exp/maps"
	"gopkg.in/yaml.v3"
)

var (
	filename  = "assets.go"
	doNotEdit = "//Code generated by assets generator. DO NOT EDIT.\n"
)

func main() {
	path, err := os.Getwd()
	if err != nil {
		logger.Fatalf("Getwd: %v", err)
	}

	yamlFile, err := ioutil.ReadFile(filepath.Join("..", "..", "assets.yaml"))
	if err != nil {
		log.Printf("yamlFile.Get err   #%v ", err)
	}

	var assets map[string]string

	err = yaml.Unmarshal(yamlFile, &assets)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}

	var sb strings.Builder

	sb.WriteString(doNotEdit)
	sb.WriteString("package types\n\n")

	symbols := maps.Keys(assets)
	sort.Strings(symbols)

	sb.WriteString("var DefaultAssetMap = Assets{\n")

	for _, s := range symbols {
		v := assets[s]
		sb.WriteString(fmt.Sprintf("\tAsset(\"%v\"): \"%v\",\n", s, v))
	}

	sb.WriteString("}\n\n")

	filepath := filepath.Join(path, filename)

	logger.Infof("Write assets file: %v", filepath)
	err = ioutil.WriteFile(filepath, []byte(sb.String()), fs.ModePerm)
	if err != nil {
		logger.Fatalf("Error write %v: %v", filename, err)
	}

}
