package main

import (
	"io/fs"
	"io/ioutil"
	"os"
	"path/filepath"
	"regexp"
	"sort"
	"strings"

	"github.com/ec-systems/core.ledger.server/cmd"
	"github.com/ec-systems/core.ledger.server/pkg/config"
	"github.com/ec-systems/core.ledger.server/pkg/logger"
	"github.com/ec-systems/core.ledger.server/pkg/types"
)

var (
	appEnvFile  = "examples/env.sample.sh"
	exampleConf = "conf.sample"

	dockerfile = "../../Dockerfile"

	DoNotEdit = "Code generated by example generator. DO NOT EDIT.\n"
)

func main() {
	path, err := os.Getwd()
	if err != nil {
		logger.Fatalf("Getwd: %v", err)
	}

	root := cmd.GetRootCmd(&cmd.Version{})

	env, err := GroupBindings(root.EnvBindings())
	if err != nil {
		logger.Fatalf("GroupedBindings: %v", err)
	}

	lines := []string{"# " + DoNotEdit}

	for _, g := range env {
		items := []string{}

		for _, v := range g {
			items = append(items, v)
		}

		sort.Strings(items)

		for _, v := range items {
			lines = append(lines, v+"=")
		}

		lines = append(lines, "")
	}

	appEnvFilePath := filepath.Join(path, appEnvFile)
	logger.Infof("Write app env example file: %v", appEnvFilePath)
	err = ioutil.WriteFile(appEnvFilePath, []byte(strings.Join(lines, "\n")), fs.ModePerm)
	if err != nil {
		logger.Fatalf("Error write %v: %v", appEnvFilePath, err)
	}

	cfg := config.Configuration()
	cfg.Assets = types.DefaultAssetMap
	cfg.Statuses = types.DefaultStatusMap
	cfg.Format = types.Protobuf

	exampleConfPath := filepath.Join(path, "examples", exampleConf)

	for _, f := range []string{"json", "yaml", "toml"} {
		filename := exampleConfPath + "." + f
		data, err := Marshal(cfg, filename)
		if err != nil {
			logger.Fatalf("Error marshal config %v: %v", filename, err)
		}

		if f != "json" {
			data = []byte("# " + DoNotEdit + string(data))
		}

		logger.Infof("Write example conf file: %v", filename)
		err = ioutil.WriteFile(filename, data, fs.ModePerm)
		if err != nil {
			logger.Fatalf("Error write %v: %v", filename, err)
		}
	}

	// generate environment variables in dockerfile
	dfEnvLines := []string{}
	dfEnvLines = append(dfEnvLines, "# ENV_START")
	for _, line := range lines {
		if len(strings.TrimSpace(line)) == 0 || strings.HasPrefix(line, "#") {
			dfEnvLines = append(dfEnvLines, line)
		} else {
			dfEnvLines = append(dfEnvLines, "ENV "+line)
		}
	}
	dfEnvLines = append(dfEnvLines, "# ENV_END")

	dfPath := filepath.Join(path, dockerfile)
	logger.Infof("Write app Dockerfile file: %v", dfPath)
	dfBytes, err := os.ReadFile(filepath.Join(path, dockerfile))
	if err != nil {
		logger.Fatalf("Error read %v: %v", dfPath, err)
	}

	envBlockMatcher := regexp.MustCompile(`(?s)#\s*ENV_START.*?#\s*ENV_END`)
	updatedDfBytes := envBlockMatcher.ReplaceAll(dfBytes, []byte(strings.Join(dfEnvLines, "\n")))
	err = ioutil.WriteFile(dfPath, updatedDfBytes, fs.ModePerm)
	if err != nil {
		logger.Fatalf("Error write %v: %v", dfPath, err)
	}
}
