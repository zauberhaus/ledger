package main

import (
	"fmt"
	"io/fs"
	"io/ioutil"
	"log"
	"os"
	"path/filepath"
	"sort"
	"strings"

	"github.com/ec-systems/core.ledger.server/pkg/logger"
	"golang.org/x/exp/maps"
	"gopkg.in/yaml.v3"
)

var (
	filename  = "statuses.go"
	doNotEdit = "//Code generated by statuses generator. DO NOT EDIT.\n"
)

func main() {
	path, err := os.Getwd()
	if err != nil {
		logger.Fatalf("Getwd: %v", err)
	}

	yamlFile, err := ioutil.ReadFile(filepath.Join("..", "..", "statuses.yaml"))
	if err != nil {
		log.Printf("yamlFile.Get err   #%v ", err)
	}

	var statuses map[string]int

	err = yaml.Unmarshal(yamlFile, &statuses)
	if err != nil {
		log.Fatalf("Unmarshal: %v", err)
	}

	if statuses == nil {
		statuses = make(map[string]int)
	}

	statuses["Unknown"] = -1
	statuses["Created"] = 0
	statuses["Canceled"] = 999
	statuses["Finished"] = 1000
	statuses["CancellationFinished"] = 998

	values := maps.Values(statuses)
	sort.Ints(values)

	var sb strings.Builder

	sb.WriteString(doNotEdit)
	sb.WriteString("package types\n\n")

	sb.WriteString("const (\n")

	for _, val := range values {
		for k, v := range statuses {
			if v == val {
				sb.WriteString(fmt.Sprintf("\t%v Status = %v\n", k, v))
			}
		}
	}

	sb.WriteString(")\n\n")

	sb.WriteString("var DefaultStatusMap = Statuses{\n")

	for _, val := range values {
		for k, v := range statuses {
			if v == val {
				sb.WriteString(fmt.Sprintf("\t\"%v\": %v,\n", k, k))
			}
		}
	}

	sb.WriteString("}\n")

	fp := filepath.Join(path, filename)

	logger.Infof("Write status file: %v", fp)
	err = ioutil.WriteFile(fp, []byte(sb.String()), fs.ModePerm)
	if err != nil {
		logger.Fatalf("Error write %v: %v", filename, err)
	}

}
